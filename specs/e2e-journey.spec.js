
/**
 * Generated by https://github.com/dsheiko/puppetry
 * on Tue Apr 06 2021 15:03:16 GMT+0530 (India Standard Time)
 * Suite: E2E-journey
 */

var nVer = process.version.match( /^v(\d+)/ );
if ( !nVer || nVer[ 1 ] < 9 ) {
  console.error( "WARNING: You have an outdated Node.js version " + process.version
    + ". You need at least v.9.x to run this test suite." );
}


const {
        bs, util, fetch, localStorage
      } = require( "../lib/bootstrap" )( "E2E-journey" ),
      puppeteerOptions = require( "../puppeteer.config.json" ),
      devicesRaw = require( "puppeteer/DeviceDescriptors" ),
      devices = devicesRaw.devicesMap;




jest.setTimeout( 50000 );

let consoleLog = [], // assetConsoleMessage
    dialogLog = []; // assertDialog;

bs.TARGETS = {};

// Environment variables
let ENV = {
  "BASE_URL": "http://www.willistowerswatson.com/ICT",
  "ARTICLE_LINK_TO_COMPARE": "https://www.willistowerswatson.com/en-US/"
};

bs.TARGETS[ "ARTICLE_CHECKBOX_ON_CONTENT_TYPE_LIST" ] = async () => await bs.query( "//*[@id=\"coveo53e11d62 sourceFilter\"]/ul/li[1]/label/div/div", false, "ARTICLE_CHECKBOX_ON_CONTENT_TYPE_LIST" );
bs.TARGETS[ "ARTICLE_LINK_1" ] = async () => await bs.query( "/html[1]/body[1]/main[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[2]/div[2]/div[4]/div[1]/div[4]/div[1]/a[1]/div[1]/div[2]/div[1]/div[1]/div[2]/div[2]/span[1]", false, "ARTICLE_LINK_1" );
bs.TARGETS[ "ARTICLE_LINK_2" ] = async () => await bs.query( "/html[1]/body[1]/main[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[2]/div[2]/div[4]/div[1]/div[4]/div[2]/a[1]/div[1]/div[2]/div[1]/div[1]/div[2]/div[2]/span[1]", false, "ARTICLE_LINK_2" );
bs.TARGETS[ "CHANGE_LOCALISATION_TO_US" ] = async () => await bs.query( "/html[1]/body[1]/div[4]/div[1]/nav[1]/button[1]/i[2]", false, "CHANGE_LOCALISATION_TO_US" );
bs.TARGETS[ "OK_BUTTON_ON_COOKIE_CONSENT" ] = async () => await bs.query( "#truste-consent-button", true, "OK_BUTTON_ON_COOKIE_CONSENT" );
bs.TARGETS[ "EXPANDED_SEARCH_PAGE_FORM_FIELD" ] = async () => await bs.query( "/html[1]/body[1]/div[4]/div[2]/section[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[3]/div[1]/form[1]/input[1]", false, "EXPANDED_SEARCH_PAGE_FORM_FIELD" );
bs.TARGETS[ "PAGINATION2" ] = async () => await bs.query( "/html[1]/body[1]/main[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[2]/div[2]/div[6]/ul[1]/li[2]/a[1]", false, "PAGINATION2" );
bs.TARGETS[ "SEARCH_BUTTON" ] = async () => await bs.query( "/html[1]/body[1]/div[4]/div[2]/section[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[3]/div[1]/form[1]/a[1]", false, "SEARCH_BUTTON" );
bs.TARGETS[ "SEARCH_FIELD_ON_THE_ICT_HOMEPAGE" ] = async () => await bs.query( "/html[1]/body[1]/div[4]/div[2]/button[2]/span[1]", false, "SEARCH_FIELD_ON_THE_ICT_HOMEPAGE" );
bs.TARGETS[ "SELECT_UNITED_STATES_ENGLISH" ] = async () => await bs.query( "/html[1]/body[1]/div[4]/div[2]/nav[1]/div[4]/div[3]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[18]/div[1]/div[1]/a[1]", false, "SELECT_UNITED_STATES_ENGLISH" );
bs.TARGETS[ "SORT_BY_DATE_LINK" ] = async () => await bs.query( "#coveo9de96e90", true, "SORT_BY_DATE_LINK" );
bs.TARGETS[ "SPAN_CLASS_ROW_ALIGN_ITEMS_CENTER" ] = async () => await bs.query( "/html[1]/body[1]/div[4]/div[2]/nav[1]/div[4]/div[3]/div[1]/div[1]/div[1]/div[1]/div[1]/button[1]/span[1]", false, "SPAN_CLASS_ROW_ALIGN_ITEMS_CENTER" );
bs.TARGETS[ "CONTENT_TYPE_FILTER_APPLIED" ] = async () => await bs.query( "//*[@id=\"coveoc9f4bcfb\"]/div[2]/div/div[2]/div[2]/div[3]/div/div[1]/div/span[1]", false, "CONTENT_TYPE_FILTER_APPLIED" );
bs.TARGETS[ "RESULTS_PAGE_LIST_BLOCK" ] = async () => await bs.query( "//*[@id=\"coveo4d890e20\"]/div[4]", false, "RESULTS_PAGE_LIST_BLOCK" );
bs.TARGETS[ "RESULTS_LISTING_BLOCK_HEADER" ] = async () => await bs.query( "//*[@id=\"coveoc9f4bcfb\"]/div[2]/div/div[2]/div[2]/div[2]/div[1]/span/span", false, "RESULTS_LISTING_BLOCK_HEADER" );

describe( "E2E-journey", () => {
  beforeAll(async () => {
    await bs.setup( puppeteerOptions, {"allure":false});
    await util.once(async () => {
      bs.browser && console.log( "BROWSER: ", await bs.browser.version() );
      await util.savePuppetterInfo( bs );
    });

    bs.page.on( "console", ( message ) => consoleLog.push( message ) );
    bs.page.on( "dialog", ( dialog ) => dialogLog.push( dialog ) );

    
    

    
  });

  afterAll(async () => {

    await bs.teardown();
  });


  describe( "WTW-ICT Page E2E Tests", () => {

    test( "Open the following URL: http://www.willistowerswatson.com/ICT {r29kmz5mun4}", async () => {
      let result, assert, searchStr, localEnv;

      // Navigating to {{ BASE_URL }}
      bs.performance.reset();
      await bs.page.goto( `${ ENV[ "BASE_URL" ] }`, {"timeout":30000,"waitUntil":"load"} );
    

      // Defining browser viewport
      await bs.page.setViewport({
        width: 1440,
        height: 713,
        deviceScaleFactor: undefined,
        isMobile: false,
        hasTouch: false,
        isLandscape: false
      });
  

      // Waiting for the given event
      try {
        await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );
      } catch ( e ) {
        // if timeout, try to proceed anyways
      }
    
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "#truste-consent-button" );

      // Emulating mouse click
      await ( await bs.getTarget( "OK_BUTTON_ON_COOKIE_CONSENT" ) ).click( {"button":"left"} );
      // SNIPPET Page wait: START
      localEnv = Object.assign( {}, ENV );

      // Waiting for 30000 ms
      await bs.page.waitFor( 30000 );
  
      ENV = Object.assign( {}, localEnv );
      // SNIPPET Page wait: END

    });


    test( "Change the language and region from top left corner to United States English {r29kmz6z43e}", async () => {
      let result, assert, searchStr, localEnv;
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[4]/div[1]/nav[1]/button[1]/i[2]" );

      // Emulating mouse click
      await ( await bs.getTarget( "CHANGE_LOCALISATION_TO_US" ) ).click( {"button":"left"} );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[4]/div[2]/nav[1]/div[4]/div[3]/div[1]/div[1]/div[1]/div[1]/div[1]/button[1]/span[1]" );

      // Emulating mouse click
      await ( await bs.getTarget( "SPAN_CLASS_ROW_ALIGN_ITEMS_CENTER" ) ).click( {"button":"left"} );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[4]/div[2]/nav[1]/div[4]/div[3]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[18]/div[1]/div[1]/a[1]" );

      // Emulating mouse click
      await ( await bs.getTarget( "SELECT_UNITED_STATES_ENGLISH" ) ).click( {"button":"left"} );
      // SNIPPET Page wait: START
      localEnv = Object.assign( {}, ENV );

      // Waiting for 30000 ms
      await bs.page.waitFor( 30000 );
  
      ENV = Object.assign( {}, localEnv );
      // SNIPPET Page wait: END

    });


    test( " Search for the word “IFRS 17” using the search box {r29kmz7497l}", async () => {
      let result, assert, searchStr, localEnv;
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[4]/div[2]/button[2]/span[1]" );

      // Emulating mouse click
      await ( await bs.getTarget( "SEARCH_FIELD_ON_THE_ICT_HOMEPAGE" ) ).click( {"button":"left"} );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[4]/div[2]/section[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[3]/div[1]/form[1]/input[1]" );
      
      // Emulating user input
      await ( await bs.getTarget( "EXPANDED_SEARCH_PAGE_FORM_FIELD" ) ).type( "IFRS 17" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[4]/div[2]/section[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[3]/div[1]/form[1]/a[1]" );

      // Emulating mouse click
      await ( await bs.getTarget( "SEARCH_BUTTON" ) ).click( {"button":"left"} );
      // SNIPPET Page wait: START
      localEnv = Object.assign( {}, ENV );

      // Waiting for 30000 ms
      await bs.page.waitFor( 30000 );
  
      ENV = Object.assign( {}, localEnv );
      // SNIPPET Page wait: END

    });


    test( "Validate if the user arrives on the result page {r29kmz74us3}", async () => {
      let result, assert, searchStr, localEnv;
      
      // Asserting that rendered text content of the focused element satisfies the given constraint
      result = ( await bs.target( await bs.getTarget( "RESULTS_LISTING_BLOCK_HEADER" ) ).getProp( "innerText" ) ).replace( /\n+/gm, "\n" );       
      expect( result ).toIncludeSubstring( "Results", "RESULTS_LISTING_BLOCK_HEADER.assertText" );
      
      // Asserts that screenshot of the page matches already approved one
      result = await bs.assertScreenshot( "r29kmz7hzzf." + "ResultsPage", {
        "fullPage": true,
        "omitBackground": false
      }, {
        "includeAA": true,
        "diffColor": [
          255,
          0,
          0
        ],
        "aaColor": [
          255,
          255,
          0
        ],
        "threshold": "0.2"
      }, bs.page );       
      expect( result ).toMatchScreenshot( 0.2, "page.assertScreenshot" );
    });


    test( "Check if the result is sorted by “Date”. If not, sort by “Date” {r29kmz75nri}", async () => {
      let result, assert, searchStr, localEnv;
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "#coveo9de96e90" );

      // Emulating mouse click
      await ( await bs.getTarget( "SORT_BY_DATE_LINK" ) ).click( {"button":"left","clickCount":1,"delay":0} );

      // Taking screenshot of the page
      await bs.traceTarget( "r29kmz7pwnr",
        {
          "SORT_BY_DATE_LINK": async () =>  await bs.getTargetOrFalse("SORT_BY_DATE_LINK")
        },
        async() => {
          await bs.page.screenshot( util.png( "r29kmz7pwnr", null, "Sort By Date ascending highlighted", {"fullPage":true,"omitBackground":false} ) );
        });

      // SNIPPET Page wait: START
      localEnv = Object.assign( {}, ENV );

      // Waiting for 30000 ms
      await bs.page.waitFor( 30000 );
  
      ENV = Object.assign( {}, localEnv );
      // SNIPPET Page wait: END

    });


    test( "Use the “Filter by” functionality and set Content Type to “Article” {r29kmz76dy4}", async () => {
      let result, assert, searchStr, localEnv;
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "//*[@id=\"coveo53e11d62 sourceFilter\"]/ul/li[1]/label/div/div" );

      // Emulating mouse click
      await ( await bs.getTarget( "ARTICLE_CHECKBOX_ON_CONTENT_TYPE_LIST" ) ).click( {"button":"left","clickCount":1,"delay":0} );
      
      // Asserting that page HTML satisfies the given constraint
      result = await bs.page.content();       
      expect( result ).toIncludeSubstring( "Clear All Filters", "page.assertContent" );
    });



  });


});
